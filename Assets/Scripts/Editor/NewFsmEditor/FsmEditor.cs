// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEditor;
using UnityEngine;
using wuxingogo.Reflection;
using System;
using System.Collections.Generic;
using System.Linq;

namespace behaviour
{
	[CustomEditor(typeof(FSM))]
	public class FsmInspector : XMonoBehaviourEditor
	{
		public override void OnXGUI()
		{
			base.OnXGUI();
			DoButton( "Open In Window", () => {
				var window = XBaseWindow.InitWindow<FsmEditor>(target);
			} );
		}
	}

	internal class FsmEditor : XBaseWindow
	{
		internal static FSM fsm = null;
		internal static FsmEvent selectEvent = null;
		internal FsmDraw painter = new FsmDraw();
		internal FsmState currState = null;
		Vector2 mousePosition = Vector2.zero;
		public override void OnInitialization(params object[] args)
		{
			base.OnInitialization(args);
			fsm = args[0] as FSM;

		}

		public override void OnXGUI()
		{
			base.OnXGUI();


			if(fsm == null)
			{
				CreateLabel("please select a fsm!");
				return;
			}

			HandleInput( Event.current );

			foreach( var item in fsm.stateCollection ) {
				painter.DrawBox(item);
			}

		}

		void HandleInput(Event e)
		{
			if( e == null )
				return;

			switch( e.type ) {
				case EventType.MouseDown:
					HandleMouseDown( e );
				break;
				case EventType.MouseUp:

				break;
				case EventType.MouseDrag:
					if( currState != null )
						currState.position += e.delta;
				break;
				case EventType.MouseMove:
					mousePosition = e.mousePosition;
				break;
				default:
				break;
			}
			Repaint();
		}

		void HandleMouseDown(Event e)
		{
			SelectBox( e.mousePosition );

			switch( e.button ) {
				case 1:
					CreateStateMenu(e.mousePosition);
				break;
				case 0:
					SelecteFsmObject();
				break;
				default:
				break;
			}
		}

		void SelectBox(Vector2 position)
		{
			currState = null;
			foreach( var item in fsm.stateCollection ) {
				if(new Rect(item.position, new Vector2(100, 100)).Contains(new Vector3(position.x, position.y, 0)))
				{
					currState = item;
					Selection.objects = new UnityEngine.Object[]{ currState };
					break;
				}
			}
		}

		void SelecteFsmObject(){
			if(currState == null)
				Selection.objects = new UnityEngine.Object[]{ fsm };
		}

		void CreateStateMenu(Vector2 position)
		{
			GenericMenu gm = new GenericMenu();
			if( currState == null ) {
				List<Type> subClasses = new List<Type>();
				subClasses.AddRange( XReflectionUtils.FindSubClass<FsmState>().ToList() );

				foreach( var item in subClasses ) {
					gm.AddItem( new GUIContent( item.Name ), false,(t) => {
						var state = item.Assembly.CreateInstance( (t as Type).FullName, false );
						var fsmState = state as FsmState;
						fsmState.owner = fsm;
						fsmState.name = (t as Type).Name;
						fsmState.position = position;
						fsm.AddState( fsmState );
					}, item );
				}
			}else{
				gm.AddItem(new GUIContent("Set Default"), false, ()=>{
					fsm.SetDefaultState(currState);
				});
				gm.AddItem(new GUIContent("Remove"), false, ()=>{
					fsm.RemoveState(currState);
					SelecteFsmObject();
				});
			}

			gm.ShowAsContext();
		}
	}

}